:- use_module(library(clpfd)).  % Importa a biblioteca CLPFD para restrições de domínio

% Sudoku Solver em Prolog

% Definindo a matriz Sudoku como uma lista de 9 listas, cada uma representando uma linha
sudoku(Puzzle) :-
    Puzzle = [A, B, C, D, E, F, G, H, I],  % Cada linha do puzzle
    append(Puzzle, Vars),                  % Coloca todas as variáveis em uma única lista
    Vars ins 1..9,                         % Restringe os valores a 1..9
    valid([A, B, C, D, E, F, G, H, I]),    % Verifica se as linhas são válidas
    transpose([A, B, C, D, E, F, G, H, I], Transposed),  % Gera a transposta para verificar as colunas
    valid(Transposed),                     % Verifica se as colunas são válidas
    blocks([A, B, C, D, E, F, G, H, I], Blocks),         % Gera os blocos de 3x3
    valid(Blocks),                         % Verifica se os blocos de 3x3 são válidos
    maplist(label, Puzzle).               % Executa o backtracking para preencher o tabuleiro

% Verifica se todos os elementos da lista de listas são válidos (linhas, colunas ou blocos)
valid([]).
valid([Head|Tail]) :-
    all_distinct(Head),                   % Verifica se todos os elementos da linha/coluna/bloco são distintos
    valid(Tail).

% Gera os blocos de 3x3
blocks([], []).
blocks([A,B,C|Rest], [Block1,Block2,Block3|BlocksTail]) :-
    block(A, B, C, Block1),
    block(A, B, C, Block2),
    block(A, B, C, Block3),
    blocks(Rest, BlocksTail).

block([], [], [], []).
block([A1,A2,A3|ARest], [B1,B2,B3|BRest], [C1,C2,C3|CRest], [A1,B1,C1,A2,B2,C2,A3,B3,C3]) :-
    block(ARest, BRest, CRest, _).

% Predicado para resolver qualquer matriz de Sudoku fornecida
solve(Puzzle) :-
    sudoku(Puzzle),
    maplist(writeln, Puzzle).

% Exemplo de uso
example(Puzzle) :-
    Puzzle = [[_,_,_,_,2,_,_,6,_],
              [6,8,_,1,_,_,_,_,_],
              [_,_,3,_,_,8,_,_,4],
              [1,_,_,_,_,_,_,2,_],
              [_,4,_,8,_,1,_,5,_],
              [_,5,_,_,_,_,_,_,9],
              [7,_,_,3,_,_,9,_,_],
              [_,_,_,_,6,2,_,3,5],
              [_,9,_,_,1,_,_,_,_]].

% Para testar, chame o predicado example/1 e solve/1 em sua consulta:
% ?- example(Puzzle), solve(Puzzle).
