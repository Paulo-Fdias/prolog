:- use_module(library(clpfd)).


sudoku(Puzzle) :-
    Puzzle = [A, B, C, D, E, F, G, H, I],  
    append(Puzzle, Vars),                  
    Vars ins 1..9,                        
    valid([A, B, C, D, E, F, G, H, I]),    
    transpose([A, B, C, D, E, F, G, H, I], Transposed), 
    valid(Transposed),                     
    blocks([A, B, C, D, E, F, G, H, I]),   
    maplist(label, Puzzle).               


valid([]).
valid([Head|Tail]) :-
    all_distinct(Head),
    valid(Tail).


blocks([A, B, C, D, E, F, G, H, I]) :-
    blocks_3x3(A, B, C),
    blocks_3x3(D, E, F),
    blocks_3x3(G, H, I).

blocks_3x3([], [], []).
blocks_3x3([A1, A2, A3 | RestA],
           [B1, B2, B3 | RestB],
           [C1, C2, C3 | RestC]) :-
    all_distinct([A1, A2, A3, B1, B2, B3, C1, C2, C3]),  
    blocks_3x3(RestA, RestB, RestC).


solve(Puzzle) :-
    sudoku(Puzzle),
    maplist(writeln, Puzzle).


example(Puzzle) :-
    Puzzle = [[8, _, _, _, _, _, _, _, _],
              [_, _, 3, 6, _, _, _, _, _],
              [_, 7, _, _, 9, _, 2, _, _],
              [_, 5, _, _, _, 7, _, _, _],
              [_, _, _, _, 4, 5, 7, _, _],
              [_, _, _, 1, _, _, _, 3, _],
              [_, _, 1, _, _, _, _, 6, 8],
              [_, _, 8, 5, _, _, _, 1, _],
              [_, 9, _, _, _, _, 4, _, _]].















/*  Puzzle = [[_, _, _, 2, 6, _, 7, _, 1],
              [6, 8, _, _, 7, _, _, 9, _],
              [1, 9, _, _, _, 4, 5, _, _],
              [8, 2, _, 1, _, _, _, 4, _],
              [_, _, 4, 6, _, 2, 9, _, _],
              [_, 5, _, _, _, 3, _, 2, 8],
              [_, _, 9, 3, _, _, _, 7, 4],
              [_, 4, _, _, 5, _, _, 3, 6],
              [7, _, 3, _, 1, 8, _, _, _]], solve(Puzzle)


 [[_, _, 1, _, 2, _, 3, _, _], 
  [_, 2, _, 3, _, 1, _, 4, _], 
  [3, _, _, _, 4, _, _, 1, 2],  
  [_, 3, 4, _, _, 2, _, _, 1], 
  [1, _, 2, 4, _, 3, 5, _, _], 
  [_, _, 5, 1, _, _, 4, 2, 3], 
  [4, _, _, _, 3, _, _, 2, _], 
  [_, 1, 3, 2, _, 4, _, 5, _], 
  [_, _, 2, _, 1, _, _, _, 4]] */

